[{"/Users/ism/Documents/Web_Development/playlist/src/reportWebVitals.js":"1","/Users/ism/Documents/Web_Development/playlist/src/dropzone/DropZone.js":"2","/Users/ism/Documents/Web_Development/playlist/src/dropzone/config.js":"3","/Users/ism/Documents/Web_Development/playlist/src/App.js":"4","/Users/ism/Documents/Web_Development/playlist/src/playlistLinks/PlaylistLinks.js":"5"},{"size":362,"mtime":1606878668409,"results":"6","hashOfConfig":"7"},{"size":7661,"mtime":1607903090940,"results":"8","hashOfConfig":"7"},{"size":381,"mtime":1607842265657,"results":"9","hashOfConfig":"7"},{"size":436,"mtime":1607843456408,"results":"10","hashOfConfig":"7"},{"size":1417,"mtime":1608066353593,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"iuorpb",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/ism/Documents/Web_Development/playlist/src/reportWebVitals.js",[],["24","25"],"/Users/ism/Documents/Web_Development/playlist/src/dropzone/DropZone.js",["26"],"import React, { useState, useEffect, useRef } from 'react';\nimport './DropZone.css';\nimport firebase from \"firebase/app\";\nimport storage from \"firebase/storage\";\nimport  firebaseConfig from \"./config\";\n\n\n\n\n// firebase.initializeApp(firebaseConfig);\n\nif (!firebase.apps.length) {\n    firebase.initializeApp(firebaseConfig);\n\n }else {\n    firebase.app(); // if already initialized, use that one\n }\n\nlet fb_storage = firebase.storage();\nlet storageRef = fb_storage.ref();  \n\n\nconst DropZone = () => {\n\nlet playlistName = '';    \n\nconst [validFiles, setValidFiles] = useState([]);    \nconst [selectedFiles, setSelectedFiles] = useState([]);\nconst [errorMessage, setErrorMessage] = useState(''); \nconst [unsupportedFiles, setUnsupportedFiles] = useState([]);\nconst fileInputRef = useRef();\n\nuseEffect(() => {\n    let filteredArray = selectedFiles.reduce((file, current) => {\n        const x = file.find(item => item.name === current.name);\n        if (!x) {\n            return file.concat([current]);\n        } else {\n            return file;\n        }\n    }, []);\n    setValidFiles([...filteredArray]);\n\n}, [selectedFiles]);\n\nconst dragOver = (e) => {\n    e.preventDefault();\n    }\n      \n    const dragEnter = (e) => {\n    e.preventDefault();\n    }\n      \n    const dragLeave = (e) => {\n    e.preventDefault();\n    }\n    \n    const fileDrop = (e) => {\n        e.preventDefault();\n        const files = e.dataTransfer.files;\n        console.log(files);\n        if (files.length) {\n            handleFiles(files);\n        }\n    }\n\n \n      \n    const handleFiles = (files) => {\n        for(let i = 0; i < files.length; i++) {\n            if (validateFile(files[i])) {\n                // add to an array so we can display the name of file\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n            } else {\n                // add a new property called invalid\n                files[i]['invalid'] = true;\n                // add to the same array so we can display the name of the file\n                setSelectedFiles(prevArray => [...prevArray, files[i]]);\n                // set error message\n                setErrorMessage('File type not permitted');\n\n                setUnsupportedFiles(prevArray => [...prevArray, files[i]]);\n            }\n        }\n    }\n      \n    const validateFile = (file) => {\n        const validTypes = ['audio/mpeg', 'audio/wav', 'audio/aiff'];\n        if (validTypes.indexOf(file.type) === -1) {\n            return false;\n        }\n        return true;\n    }\n    \n    const fileSize = (size) => {\n        if (size === 0) return '0 Bytes';\n        const k = 1024;\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n        const i = Math.floor(Math.log(size) / Math.log(k));\n        return parseFloat((size / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n    }\n    \n    const fileType = (fileName) => {\n        return fileName.substring(fileName.lastIndexOf('.') + 1, fileName.length) || fileName;\n    }\n\n    const removeFile = (name) => {\n        // find the index of the item\n        // remove the item from array\n        const validFileIndex = validFiles.findIndex(e => e.name === name);\n\n        validFiles.splice(validFileIndex, 1);\n        // update valid files array\n        setValidFiles([...validFiles]);\n        const selectedFileIndex = selectedFiles.findIndex(e => e.name === name);\n        selectedFiles.splice(selectedFileIndex, 1);\n        // update selectedFiles array\n        setSelectedFiles([...selectedFiles]);\n\n        const unsupportedFileIndex = unsupportedFiles.findIndex(e => e.name === name);\n\n        if(unsupportedFileIndex !== -1){\n            unsupportedFiles.splice(unsupportedFileIndex, 1);\n            setUnsupportedFiles([...unsupportedFiles]);\n        }\n\n    }\n\n  \n   \n    const fileInputClicked = () => {\n        fileInputRef.current.click();\n    }\n\n    const filesSelected = () => {\n        if (fileInputRef.current.files.length) {\n            handleFiles(fileInputRef.current.files);\n        }\n    }\n\n    const uploadModalRef = useRef();\n    const uploadRef = useRef();\n    const progressRef = useRef();\n\n    const closeUploadModal = () => {\n        uploadModalRef.current.style.display = 'none';\n    }\n\n    const uploadFiles = () => {\n        uploadModalRef.current.style.display = 'block';\n        uploadRef.current.innerHTML = 'File(s) Uploading...';\n\n       \n        playlistName = document.getElementById('playlistName').value;\n        console.log(playlistName);\n        for (let i = 0; i < validFiles.length; i++) {\n            \n            var audioRef = storageRef.child(playlistName + '/' + validFiles[i]['name']);\n\n            let audioFile = validFiles[i];\n            var uploadTask = audioRef.put(audioFile);\n\n            \n        }\n\n        uploadTask.on('state_changed', function(snapshot){\n            var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\n            document.querySelector('.progress-bar').style.width = progress + '%';\n            console.log('Upload is ' + progress + '% done');\n            \n            }, function(error){\n                alert('oops error uploading. try again');\n            }, function(){\n                // handle successful upload\n                document.querySelector('.upload-modal').style.display = 'none';\n                setValidFiles([]);\n            }\n\n        )\n\n       \n    }\n\n\n    return (\n     <>   \n    <div className=\"container\">\n        <input id=\"playlistName\" placeholder=\"Enter Playlist Name\" type=\"text\"/>\n        {unsupportedFiles.length === 0 && validFiles.length ? <button className=\"file-upload-btn\" onClick={() => uploadFiles()}>Upload Files</button> : ''} \n{unsupportedFiles.length ? <p>Please remove all unsupported files.</p> : ''}\n        <div className=\"drop-container\" \n            onDragOver={dragOver}\n            onDragEnter={dragEnter}\n            onDragLeave={dragLeave}\n            onDrop={fileDrop}\n            onClick={fileInputClicked}\n        >\n        \n        <div className=\"drop-message\">\n            <input\n            ref={fileInputRef}\n            className=\"file-input\"\n            type=\"file\"\n            multiple\n            onChange={filesSelected}\n            />\n\n            <div className=\"upload-icon\"></div>\n            Drag & Drop files here or click to upload\n        </div>            \n        </div>\n        <div className=\"file-display-container\">\n            {\n            validFiles.map((data, i) => \n                <div className=\"file-status-bar\" key={i}>\n                    <div>\n                        <div className=\"file-type-logo\">logo</div>\n                        <div className=\"file-type\">{fileType(data.name)}</div>\n                        <span className={`file-name ${data.invalid ? 'file-error' : ''}`}>{data.name}</span>\n                        <span className=\"file-size\">({fileSize(data.size)})</span> {data.invalid && <span className='file-error-message'>({errorMessage})</span>}\n                    </div>\n                    <div className=\"file-remove\" onClick={() => removeFile(data.name)}>X</div>\n                </div>\n            )\n            }\n        </div>\n        \n    </div>\n\n    <div className=\"upload-modal\" ref={uploadModalRef}>\n            <div className=\"overlay\"></div>\n            <div className=\"close\" onClick={(() => closeUploadModal())}>X</div>\n            <div className=\"progress-container\">\n            <span ref={uploadRef}></span>\n            <div className=\"progress\">\n            <div className=\"progress-bar\" ref={progressRef}></div>\n            </div>\n            </div>\n        </div>\n    </>\n    )\n}\nexport default DropZone;\n\n// https://www.youtube.com/watch?v=8r1Pb6Ja90o","/Users/ism/Documents/Web_Development/playlist/src/dropzone/config.js",[],"/Users/ism/Documents/Web_Development/playlist/src/App.js",["27"],"/Users/ism/Documents/Web_Development/playlist/src/playlistLinks/PlaylistLinks.js",["28","29","30"],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":4,"column":8,"nodeType":"37","messageId":"38","endLine":4,"endColumn":15},{"ruleId":"35","severity":1,"message":"39","line":1,"column":8,"nodeType":"37","messageId":"38","endLine":1,"endColumn":12},{"ruleId":"35","severity":1,"message":"40","line":1,"column":38,"nodeType":"37","messageId":"38","endLine":1,"endColumn":44},{"ruleId":"35","severity":1,"message":"36","line":3,"column":8,"nodeType":"37","messageId":"38","endLine":3,"endColumn":15},{"ruleId":"35","severity":1,"message":"41","line":20,"column":5,"nodeType":"37","messageId":"38","endLine":20,"endColumn":12},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'storage' is defined but never used.","Identifier","unusedVar","'logo' is defined but never used.","'useRef' is defined but never used.","'folders' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]